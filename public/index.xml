<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Allposs博客</title>
    <link>http://blog.allposs.com/</link>
    <description>Recent content on Allposs博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 鄂ICP备15010464号-1</copyright>
    <lastBuildDate>Fri, 14 Jun 2019 14:20:23 +0800</lastBuildDate>
    
	<atom:link href="http://blog.allposs.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>006-GO语言数据类型</title>
      <link>http://blog.allposs.com/post/golang/006-go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 14 Jun 2019 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/golang/006-go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本文接上一篇文章，主要介绍数组（array），切片（slice），字典/映射（map），结构体（struct）这类扩展类的数据类型.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>005-GO语言数据类型</title>
      <link>http://blog.allposs.com/post/golang/005-go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 08 Jun 2019 10:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/golang/005-go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在Go编程语言中，数据类型用于声明函数和变量。数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>004-GO语言编程规范</title>
      <link>http://blog.allposs.com/post/golang/004-go%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</link>
      <pubDate>Tue, 04 Jun 2019 16:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/golang/004-go%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这篇文章主要介绍在GO语言编程方面的一些标准与规范。虽然go语言的格式化工具能解决部分的格式问题,但是还有一部分细节内容没有规范。提前遵守规范有助于养成良好的编程风格。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>003-GO语言基础结构</title>
      <link>http://blog.allposs.com/post/golang/003-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 04 Jun 2019 15:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/golang/003-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在学习GO语言的过程中,了解一下程序的实现结构是必要。而GO语言程序基本上由《程序包》+《引用包》组成的。而程序包又由多个包程序文件(源文件)实现,而程序文件则分为以下几个部分:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;包声明&lt;/li&gt;
&lt;li&gt;引入包&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;li&gt;注释&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>002-GO语言环境搭建</title>
      <link>http://blog.allposs.com/post/golang/002-go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 24 May 2019 10:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/golang/002-go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这篇文章主要记录Golang在各个主流操作系统上的开发环境搭建。这里的IDE选择VSCode的原因是比较轻量,功能简单实用并与git结合比较紧密,比较适合新手入门。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>101-Windows系统下的Docker</title>
      <link>http://blog.allposs.com/post/kubernetes/101-windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84docker/</link>
      <pubDate>Thu, 23 May 2019 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/kubernetes/101-windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84docker/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;windows下实现容器的方式与linux下实现的方法和方式都不同，这篇文章主要介绍windows下容器的实现原理与方法。由于系统厂商的性质不同，网上的相关内容都很少，这都是博主自己翻阅资料学习理解的，如果有错误欢迎指正！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>102-容器技术之Cgroup(一)</title>
      <link>http://blog.allposs.com/post/kubernetes/102-%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%B9%8Bcgroup/</link>
      <pubDate>Thu, 23 May 2019 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/kubernetes/102-%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%B9%8Bcgroup/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cgroup和namespace类似，也是将进程进行分组，但它的目的和namespace不一样，namespace是为了隔离进程组之间的资源，而cgroup是为了对一组进程进行统一的资源监控和限制。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cgroup分v1和v2两个版本，v1实现较早，功能比较多，但是由于它里面的功能都是零零散散的实现的，所以规划的不是很好，导致了一些使用和维护上的不便，v2的出现就是为了解决v1中这方面的问题，在最新的4.5内核中，cgroup v2声称已经可以用于生产环境了，但它所支持的功能还很有限，随着v2一起引入内核的还有cgroup namespace。v1和v2可以混合使用，但是这样会更复杂，所以一般没人会这样用。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本系列只介绍v1，因为这是目前大家正在用的版本，包括systemd，docker等。如果对v1比较熟悉的话，适应v2也不是问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>001-GO语言简介</title>
      <link>http://blog.allposs.com/post/golang/001-go%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 23 May 2019 10:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/golang/001-go%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Go语言是由Google开发的一个开源项目，目的之一为了提高开发人员的编程效率。 Go语言语法灵活、简洁、清晰、高效。它对的并发特性可以方便地用于多核处理器 和网络开发，同时灵活新颖的类型系统可以方便地编写模块化的系统。go可以快速编译， 同时具有垃圾内存自动回收功能，并且还支持运行时反射。Go是一个高效、静态类型， 但是又具有解释语言的动态类型特征的系统级语法。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Go语言学习起点低,在我自己学习Go语言的过程中，感觉Go语言入门比较简单,代码格式要求高.相较C语言没有过多的功能,让人感觉简洁明了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>002-Docker的核心原理</title>
      <link>http://blog.allposs.com/post/kubernetes/002-docker%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 20 May 2019 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/kubernetes/002-docker%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;Docker 核心技术主要从以下几个方面实现：&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;命名空间(namespace):通过进程命名空间，将docker进程和宿主进程进行隔离.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;网络:docker打通命名空间与外部通讯的方式，类型有：bridge模式网络，host模式网络，container模式网络，none模式网络。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;文件隔离(cgroup):通过加载虚拟挂载点，重设 root 目录等等，将文件系统进行隔离物理资源的隔离，通过 CGroups（Control Groups），限制容器在 CPU，内存，磁盘IO、网络上的使用率，以此来隔离容器间的资源分配。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;镜像:Dockerfile 中的每条命令会形成一个 diff 层，每个 diff 层都是只读的，只有最上面的层是可写的。这个操作通过 UnionFS 实现。通过AUFS，Btrfs，Device mapper，Overlayfs，ZFS，VFS，可以将未修改的镜像层进行联合挂载，从而提高读写效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>001-容器技术与Docker</title>
      <link>http://blog.allposs.com/post/kubernetes/001-%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%B8%8Edocker/</link>
      <pubDate>Fri, 12 Apr 2019 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/kubernetes/001-%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%B8%8Edocker/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Docker是现今比较火热的一个开源软件，遵从了Apache2.0协议，使用Go语言开发,基于容器技术实现的一种系统层的虚拟化软件。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;容器技术是管理使用容器的一种技术，而容器是将软件打包成标准化单元，以用于开发、交付和部署的一种标准单元。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>友情链接</title>
      <link>http://blog.allposs.com/contact/</link>
      <pubDate>Tue, 01 May 2018 10:01:58 +0800</pubDate>
      
      <guid>http://blog.allposs.com/contact/</guid>
      <description></description>
    </item>
    
    <item>
      <title>关于</title>
      <link>http://blog.allposs.com/about/</link>
      <pubDate>Sun, 29 Apr 2018 12:58:58 +0800</pubDate>
      
      <guid>http://blog.allposs.com/about/</guid>
      <description>博客 &amp;#160; &amp;#160; &amp;#160; &amp;#160;这个博客是本人记录自己学习的一些经历与学习总结，主要的范围是golang,Docker,k8s,Openstack,各类系统,嵌入式,系统服务等。
博主 &amp;#160; &amp;#160; &amp;#160; &amp;#160;博主是一个爱好计算机并工作于计算机相关岗位的大龄青年。
 博主Github地址：https://github.com/allposs
博主QQ号：357287382
 golang graph TB; Go语言--Go语言历史; Go语言--Go环境搭建; click Go环境搭建 &#34;</description>
    </item>
    
    <item>
      <title>kafka集群配置安装</title>
      <link>http://blog.allposs.com/post/linux/003-kafka%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/</link>
      <pubDate>Tue, 16 Aug 2016 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/linux/003-kafka%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/</guid>
      <description>简介 &amp;#160; &amp;#160; &amp;#160; &amp;#160;Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群机来提供实时的消费。
环境  操作系统：CentOS 7.2 x64 Yum源：163源 IP地址： node1 10.199.200.101 node2 10.199.200.102 node3 10.</description>
    </item>
    
    <item>
      <title>Selinux 配置基础</title>
      <link>http://blog.allposs.com/post/linux/004-selinux%E9%85%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 25 Jun 2016 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/linux/004-selinux%E9%85%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/</guid>
      <description>简介 &amp;#160; &amp;#160; &amp;#160; &amp;#160;SELinux(Security-Enhanced Linux) 是美国国家安全局（NAS）对于强制访问控 制的实现，在这种访问控制体系的限制下，进程只能访问那些在他的任务中所需要文件。大部分使用 SELinux 的人使用的都是SELinux就绪的发行版，例如 Fedora、Red Hat Enterprise Linux (RHEL)、Debian 或 Gentoo。它们都是在内核中启用SELinux 的，并且提供一个可定制的安全策略，还提供很多用户层的库和工具，它们都可以使用 SELinux 的功能。</description>
    </item>
    
    <item>
      <title>Mitaka版openstack三节点安装</title>
      <link>http://blog.allposs.com/post/virtualization/001-mitaka%E7%89%88openstack%E4%B8%89%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 17 Jun 2016 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/virtualization/001-mitaka%E7%89%88openstack%E4%B8%89%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;Mitaka版openstack三节点安装文档。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Systemd 详解</title>
      <link>http://blog.allposs.com/post/linux/002-systemd%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 24 May 2016 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/linux/002-systemd%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;CentOS 与RedHat 的7.x系统都采用systemd替换了SysV。Systemd目的是要取代Unix时代以来一直在使用的init系统，兼容SysV和LSB的启动脚本，而且够在进程启动过程中更有效地引导加载服务。
systemd的特性有：
1. 支持并行化任务
1. 同时采用socket式与D-Bus总线式激活服务；
1. 按需启动守护进程（daemon）；
1. 利用 Linux 的 cgroups 监视进程；
1. 支持快照和系统恢复；
1. 维护挂载点和自动挂载点；
1. 各服务间基于依赖关系进行精密控制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bond&#43;桥接配置</title>
      <link>http://blog.allposs.com/post/linux/001-bond&#43;%E6%A1%A5%E6%8E%A5%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 17 May 2016 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/linux/001-bond&#43;%E6%A1%A5%E6%8E%A5%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;Centos7版本下网卡的bond与team配置。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS7.2安装KVM</title>
      <link>http://blog.allposs.com/post/virtualization/002-centos7.2%E5%AE%89%E8%A3%85kvm/</link>
      <pubDate>Wed, 04 May 2016 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/virtualization/002-centos7.2%E5%AE%89%E8%A3%85kvm/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;Kernel-based Virtual Machine的简称，是一个开源的系统虚拟化模块，自Linux 2.6.20之后集成在Linux的各个主要发行版本中。它使用Linux自身的调度器进行管理，所以相对于Xen，其核心源码很少。KVM目前已成为学术界的主流VMM之一。&lt;/p&gt;

&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;KVM的虚拟化需要硬件支持（如Intel VT技术或者AMD V技术)。是基于硬件的完全虚拟化。而Xen早期则是基于软件模拟的Para-Virtualization，新版本则是基于硬件支持的完全虚拟化。但Xen本身有自己的进程调度器，存储管理模块等，所以代码较为庞大。广为流传的商业系统虚拟化软件VMware ESX系列是基于软件模拟的Full-Virtualization。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>