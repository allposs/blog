<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019-05 on Allposs博客</title>
    <link>http://blog.allposs.com/tags/2019-05/</link>
    <description>Recent content in 2019-05 on Allposs博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 鄂ICP备15010464号-1</copyright>
    <lastBuildDate>Fri, 24 May 2019 10:20:23 +0800</lastBuildDate>
    
	<atom:link href="http://blog.allposs.com/tags/2019-05/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>002-GO语言环境搭建</title>
      <link>http://blog.allposs.com/post/golang/002-go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 24 May 2019 10:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/golang/002-go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这篇文章主要记录Golang在各个主流操作系统上的开发环境搭建。这里的IDE选择VSCode的原因是比较轻量,功能简单实用并与git结合比较紧密,比较适合新手入门。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>101-Windows系统下的Docker</title>
      <link>http://blog.allposs.com/post/kubernetes/101-windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84docker/</link>
      <pubDate>Thu, 23 May 2019 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/kubernetes/101-windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84docker/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;windows下实现容器的方式与linux下实现的方法和方式都不同，这篇文章主要介绍windows下容器的实现原理与方法。由于系统厂商的性质不同，网上的相关内容都很少，这都是博主自己翻阅资料学习理解的，如果有错误欢迎指正！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>102-容器技术之Cgroup(一)</title>
      <link>http://blog.allposs.com/post/kubernetes/102-%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%B9%8Bcgroup/</link>
      <pubDate>Thu, 23 May 2019 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/kubernetes/102-%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%B9%8Bcgroup/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cgroup和namespace类似，也是将进程进行分组，但它的目的和namespace不一样，namespace是为了隔离进程组之间的资源，而cgroup是为了对一组进程进行统一的资源监控和限制。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cgroup分v1和v2两个版本，v1实现较早，功能比较多，但是由于它里面的功能都是零零散散的实现的，所以规划的不是很好，导致了一些使用和维护上的不便，v2的出现就是为了解决v1中这方面的问题，在最新的4.5内核中，cgroup v2声称已经可以用于生产环境了，但它所支持的功能还很有限，随着v2一起引入内核的还有cgroup namespace。v1和v2可以混合使用，但是这样会更复杂，所以一般没人会这样用。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本系列只介绍v1，因为这是目前大家正在用的版本，包括systemd，docker等。如果对v1比较熟悉的话，适应v2也不是问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>001-GO语言简介</title>
      <link>http://blog.allposs.com/post/golang/001-go%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 23 May 2019 10:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/golang/001-go%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Go语言是由Google开发的一个开源项目，目的之一为了提高开发人员的编程效率。 Go语言语法灵活、简洁、清晰、高效。它对的并发特性可以方便地用于多核处理器 和网络开发，同时灵活新颖的类型系统可以方便地编写模块化的系统。go可以快速编译， 同时具有垃圾内存自动回收功能，并且还支持运行时反射。Go是一个高效、静态类型， 但是又具有解释语言的动态类型特征的系统级语法。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Go语言学习起点低,在我自己学习Go语言的过程中，感觉Go语言入门比较简单,代码格式要求高.相较C语言没有过多的功能,让人感觉简洁明了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>002-Docker的核心原理</title>
      <link>http://blog.allposs.com/post/kubernetes/002-docker%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 20 May 2019 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/kubernetes/002-docker%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;Docker 核心技术主要从以下几个方面实现：&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;命名空间(namespace):通过进程命名空间，将docker进程和宿主进程进行隔离.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;网络:docker打通命名空间与外部通讯的方式，类型有：bridge模式网络，host模式网络，container模式网络，none模式网络。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;文件隔离(cgroup):通过加载虚拟挂载点，重设 root 目录等等，将文件系统进行隔离物理资源的隔离，通过 CGroups（Control Groups），限制容器在 CPU，内存，磁盘IO、网络上的使用率，以此来隔离容器间的资源分配。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;镜像:Dockerfile 中的每条命令会形成一个 diff 层，每个 diff 层都是只读的，只有最上面的层是可写的。这个操作通过 UnionFS 实现。通过AUFS，Btrfs，Device mapper，Overlayfs，ZFS，VFS，可以将未修改的镜像层进行联合挂载，从而提高读写效率。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>