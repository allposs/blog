<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Allposs博客</title>
    <link>http://blog.allposs.com/topics/docker/</link>
    <description>Recent content in Docker on Allposs博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 鄂ICP备15010464号-1</copyright>
    <lastBuildDate>Thu, 23 May 2019 14:20:23 +0800</lastBuildDate>
    
	<atom:link href="http://blog.allposs.com/topics/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>101-Windows系统下的Docker</title>
      <link>http://blog.allposs.com/post/kubernetes/101-windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84docker/</link>
      <pubDate>Thu, 23 May 2019 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/kubernetes/101-windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84docker/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;windows下实现容器的方式与linux下实现的方法和方式都不同，这篇文章主要介绍windows下容器的实现原理与方法。由于系统厂商的性质不同，网上的相关内容都很少，这都是博主自己翻阅资料学习理解的，如果有错误欢迎指正！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>002-Docker的核心原理</title>
      <link>http://blog.allposs.com/post/kubernetes/002-docker%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 20 May 2019 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/kubernetes/002-docker%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;Docker 核心技术主要从以下几个方面实现：&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;命名空间(namespace):通过进程命名空间，将docker进程和宿主进程进行隔离.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;网络:docker打通命名空间与外部通讯的方式，类型有：bridge模式网络，host模式网络，container模式网络，none模式网络。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;文件隔离(cgroup):通过加载虚拟挂载点，重设 root 目录等等，将文件系统进行隔离物理资源的隔离，通过 CGroups（Control Groups），限制容器在 CPU，内存，磁盘IO、网络上的使用率，以此来隔离容器间的资源分配。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;镜像:Dockerfile 中的每条命令会形成一个 diff 层，每个 diff 层都是只读的，只有最上面的层是可写的。这个操作通过 UnionFS 实现。通过AUFS，Btrfs，Device mapper，Overlayfs，ZFS，VFS，可以将未修改的镜像层进行联合挂载，从而提高读写效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>001-容器技术与Docker</title>
      <link>http://blog.allposs.com/post/kubernetes/001-%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%B8%8Edocker/</link>
      <pubDate>Fri, 12 Apr 2019 14:20:23 +0800</pubDate>
      
      <guid>http://blog.allposs.com/post/kubernetes/001-%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%B8%8Edocker/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Docker是现今比较火热的一个开源软件，遵从了Apache2.0协议，使用Go语言开发,基于容器技术实现的一种系统层的虚拟化软件。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;容器技术是管理使用容器的一种技术，而容器是将软件打包成标准化单元，以用于开发、交付和部署的一种标准单元。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>